name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      # Install AWS CLI
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
      # Configure AWS Credentials
      - name: Configure AWS CLI
        run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          && aws configure set region us-east-1    
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: NPM Install
        run: npm install
        
      - name: Docker build and push
        run: |
          # Run commands to build and push Docker images
          docker build -t swiggy-clone .
          docker tag swiggy-clone qu1et/swiggy-clone:latest
          docker login -u ${{ secrets.Dockerhub_username }} -p ${{ secrets.Dockerhub_token }}
          docker push qu1et/swiggy-clone:latest
        env:
          DOCKER_CLI_ACI: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install Trivy
        run: |
          wget -qO- https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.57.1_Linux-64bit.tar.gz | tar xz
          sudo mv trivy /usr/local/bin/
      - name: docker pull image
        run: docker pull qu1et/swiggy-clone:latest
      - name: Image scan
        run: trivy image qu1et/swiggy-clone:latest > trivyimagedeploy.txt
      - name: Deploy to container
        run: docker run -d --name swiggy-clone -p 3000:3000 qu1et/swiggy-clone:latest
      - name: Update kubeconfig
        run: aws eks --region us-east-1 update-kubeconfig --name EKS_CLOUD
      - name: Deploy to kubernetes
        run: kubectl apply -f deployment-service.yml2. commit the changes and this will deploy the image locally on the base server
        

      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
